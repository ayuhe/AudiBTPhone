apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'com.droidtitan.lintcleaner'

//获取当前日期
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // replace with the current version of the Android plugin
        classpath 'com.android.tools.build:gradle:2.1.0'
        // Since Android's Gradle plugin 0.11, you have to use android-apt >= 1.3
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.droidtitan:lint-cleaner-plugin:0.3.0'
    }
}

apt {
    arguments {
        resourcePackageName "com.lingfei.android.bt"
        // androidManifestFile variant.outputs[0].processResources.manifestFile
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.lingfei.bt"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "LF_BT_Phone_" + releaseTime()
        multiDexEnabled true
    }
    buildTypes {
        release {
            // 去除无用的resource文件
            shrinkResources true

            // 这里的作用: 是否混淆代码
            minifyEnabled false

            // 加载混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "2g"
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            if (variant.buildType.name.equals('release')) {
//                def releaseApkName = defaultConfig.versionName + '.apk'
                def releaseApkName = 'LFBTPhone.apk'
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }
        }
    }
}

dependencies {
    compile project(':uilib')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //Dagger
    provided 'javax.annotation:javax.annotation-api:1.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    compile 'com.google.dagger:dagger:2.0.2'
    compile 'com.android.support:multidex:1.0.1'
}
